require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ArmorsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Armor. As you add validations to Armor, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    #FactoryBot.build(:role).as_json
    FactoryBot.attributes_for(:armor)
  }

  let(:invalid_attributes) {
    FactoryBot.attributes_for(:armor, name: nil)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ArmorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'returns a success response', :show_in_doc do
      armor = Armor.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_success
    end

    it 'returns a 10 elements', :show_in_doc do
      FactoryBot.create_list(:armor, 50)
      get :index, params: {page: 1, per_page: 10}, session: valid_session
      armors = JSON.parse(response.body)
      expect(armors.count).to eq(10)
    end
  end

  describe 'GET #index with :zombie_id' do
    it 'returns a success response', :show_in_doc do
      armor = Armor.create! valid_attributes
      zombie = FactoryBot.create(:zombie)
      get :index, params: {zombie_id: zombie.id}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response', :show_in_doc do
      armor = Armor.create! valid_attributes
      get :show, params: {id: armor.to_param}, session: valid_session
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Armor', :show_in_doc do
        expect {
          post :create, params: {armor: valid_attributes}, session: valid_session
        }.to change(Armor, :count).by(1)
      end

      it 'renders a JSON response with the new armor', :show_in_doc do

        post :create, params: {armor: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:created)
        expect(response.content_type).to eq('application/json')
        expect(response.location).to eq(armor_url(Armor.last))
      end
    end

    context 'with invalid params', :show_in_doc do
      it 'renders a JSON response with errors for the new armor' do

        post :create, params: {armor: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        FactoryBot.attributes_for(:armor)
      }

      it 'updates the requested armor', :show_in_doc do
        armor = Armor.create! valid_attributes
        update_attributes = new_attributes
        put :update, params: {id: armor.to_param, armor: update_attributes}, session: valid_session
        armor.reload
        expect(armor.name).to eq(new_attributes[:name])
        expect(armor.defense_points).to eq(new_attributes[:defense_points])
        expect(armor.durability).to eq(new_attributes[:durability])
        expect(armor.price).to eq(new_attributes[:price])
      end

      it 'renders a JSON response with the armor', :show_in_doc do
        armor = Armor.create! valid_attributes

        put :update, params: {id: armor.to_param, armor: valid_attributes}, session: valid_session
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to eq('application/json')
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the armor', :show_in_doc do
        armor = Armor.create! valid_attributes

        put :update, params: {id: armor.to_param, armor: invalid_attributes}, session: valid_session
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to eq('application/json')
      end
    end
  end

  describe 'DELETE #destroy', :show_in_doc do
    it 'destroys the requested armor' do
      armor = Armor.create! valid_attributes
      expect {
        delete :destroy, params: {id: armor.to_param}, session: valid_session
      }.to change(Armor, :count).by(-1)
    end
  end

end
